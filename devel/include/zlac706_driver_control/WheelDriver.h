// Generated by gencpp from file zlac706_driver_control/WheelDriver.msg
// DO NOT EDIT!


#ifndef ZLAC706_DRIVER_CONTROL_MESSAGE_WHEELDRIVER_H
#define ZLAC706_DRIVER_CONTROL_MESSAGE_WHEELDRIVER_H

#include <ros/service_traits.h>


#include <zlac706_driver_control/WheelDriverRequest.h>
#include <zlac706_driver_control/WheelDriverResponse.h>


namespace zlac706_driver_control
{

struct WheelDriver
{

typedef WheelDriverRequest Request;
typedef WheelDriverResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;

}; // struct WheelDriver
} // namespace zlac706_driver_control


namespace ros
{
namespace service_traits
{


template<>
struct MD5Sum< ::zlac706_driver_control::WheelDriver > {
  static const char* value()
  {
    return "3ee118de48c6d49aa063a6db9c3e1ac0";
  }

  static const char* value(const ::zlac706_driver_control::WheelDriver&) { return value(); }
};

template<>
struct DataType< ::zlac706_driver_control::WheelDriver > {
  static const char* value()
  {
    return "zlac706_driver_control/WheelDriver";
  }

  static const char* value(const ::zlac706_driver_control::WheelDriver&) { return value(); }
};


// service_traits::MD5Sum< ::zlac706_driver_control::WheelDriverRequest> should match
// service_traits::MD5Sum< ::zlac706_driver_control::WheelDriver >
template<>
struct MD5Sum< ::zlac706_driver_control::WheelDriverRequest>
{
  static const char* value()
  {
    return MD5Sum< ::zlac706_driver_control::WheelDriver >::value();
  }
  static const char* value(const ::zlac706_driver_control::WheelDriverRequest&)
  {
    return value();
  }
};

// service_traits::DataType< ::zlac706_driver_control::WheelDriverRequest> should match
// service_traits::DataType< ::zlac706_driver_control::WheelDriver >
template<>
struct DataType< ::zlac706_driver_control::WheelDriverRequest>
{
  static const char* value()
  {
    return DataType< ::zlac706_driver_control::WheelDriver >::value();
  }
  static const char* value(const ::zlac706_driver_control::WheelDriverRequest&)
  {
    return value();
  }
};

// service_traits::MD5Sum< ::zlac706_driver_control::WheelDriverResponse> should match
// service_traits::MD5Sum< ::zlac706_driver_control::WheelDriver >
template<>
struct MD5Sum< ::zlac706_driver_control::WheelDriverResponse>
{
  static const char* value()
  {
    return MD5Sum< ::zlac706_driver_control::WheelDriver >::value();
  }
  static const char* value(const ::zlac706_driver_control::WheelDriverResponse&)
  {
    return value();
  }
};

// service_traits::DataType< ::zlac706_driver_control::WheelDriverResponse> should match
// service_traits::DataType< ::zlac706_driver_control::WheelDriver >
template<>
struct DataType< ::zlac706_driver_control::WheelDriverResponse>
{
  static const char* value()
  {
    return DataType< ::zlac706_driver_control::WheelDriver >::value();
  }
  static const char* value(const ::zlac706_driver_control::WheelDriverResponse&)
  {
    return value();
  }
};

} // namespace service_traits
} // namespace ros

#endif // ZLAC706_DRIVER_CONTROL_MESSAGE_WHEELDRIVER_H
