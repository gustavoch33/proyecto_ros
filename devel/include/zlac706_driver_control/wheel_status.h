// Generated by gencpp from file zlac706_driver_control/wheel_status.msg
// DO NOT EDIT!


#ifndef ZLAC706_DRIVER_CONTROL_MESSAGE_WHEEL_STATUS_H
#define ZLAC706_DRIVER_CONTROL_MESSAGE_WHEEL_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace zlac706_driver_control
{
template <class ContainerAllocator>
struct wheel_status_
{
  typedef wheel_status_<ContainerAllocator> Type;

  wheel_status_()
    : status()
    , voltage(0.0)  {
    }
  wheel_status_(const ContainerAllocator& _alloc)
    : status(_alloc)
    , voltage(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;

   typedef float _voltage_type;
  _voltage_type voltage;





  typedef boost::shared_ptr< ::zlac706_driver_control::wheel_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::zlac706_driver_control::wheel_status_<ContainerAllocator> const> ConstPtr;

}; // struct wheel_status_

typedef ::zlac706_driver_control::wheel_status_<std::allocator<void> > wheel_status;

typedef boost::shared_ptr< ::zlac706_driver_control::wheel_status > wheel_statusPtr;
typedef boost::shared_ptr< ::zlac706_driver_control::wheel_status const> wheel_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::zlac706_driver_control::wheel_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::zlac706_driver_control::wheel_status_<ContainerAllocator1> & lhs, const ::zlac706_driver_control::wheel_status_<ContainerAllocator2> & rhs)
{
  return lhs.status == rhs.status &&
    lhs.voltage == rhs.voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::zlac706_driver_control::wheel_status_<ContainerAllocator1> & lhs, const ::zlac706_driver_control::wheel_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace zlac706_driver_control

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::zlac706_driver_control::wheel_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::zlac706_driver_control::wheel_status_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::zlac706_driver_control::wheel_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "272799e5d37bf8b3a6a4dfa0bceaf521";
  }

  static const char* value(const ::zlac706_driver_control::wheel_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x272799e5d37bf8b3ULL;
  static const uint64_t static_value2 = 0xa6a4dfa0bceaf521ULL;
};

template<class ContainerAllocator>
struct DataType< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "zlac706_driver_control/wheel_status";
  }

  static const char* value(const ::zlac706_driver_control::wheel_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string status\n"
"float32 voltage\n"
;
  }

  static const char* value(const ::zlac706_driver_control::wheel_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.status);
      stream.next(m.voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wheel_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::zlac706_driver_control::wheel_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::zlac706_driver_control::wheel_status_<ContainerAllocator>& v)
  {
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ZLAC706_DRIVER_CONTROL_MESSAGE_WHEEL_STATUS_H
