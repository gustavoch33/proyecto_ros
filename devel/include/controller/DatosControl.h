// Generated by gencpp from file controller/DatosControl.msg
// DO NOT EDIT!


#ifndef CONTROLLER_MESSAGE_DATOSCONTROL_H
#define CONTROLLER_MESSAGE_DATOSCONTROL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace controller
{
template <class ContainerAllocator>
struct DatosControl_
{
  typedef DatosControl_<ContainerAllocator> Type;

  DatosControl_()
    : linearVel(0.0)
    , angularVel(0.0)
    , angle(0.0)
    , x(0.0)
    , xd(0.0)
    , y(0.0)
    , yd(0.0)
    , ex(0.0)
    , ey(0.0)
    , evx(0.0)
    , evy(0.0)
    , eT(0.0)  {
    }
  DatosControl_(const ContainerAllocator& _alloc)
    : linearVel(0.0)
    , angularVel(0.0)
    , angle(0.0)
    , x(0.0)
    , xd(0.0)
    , y(0.0)
    , yd(0.0)
    , ex(0.0)
    , ey(0.0)
    , evx(0.0)
    , evy(0.0)
    , eT(0.0)  {
  (void)_alloc;
    }



   typedef double _linearVel_type;
  _linearVel_type linearVel;

   typedef double _angularVel_type;
  _angularVel_type angularVel;

   typedef double _angle_type;
  _angle_type angle;

   typedef double _x_type;
  _x_type x;

   typedef double _xd_type;
  _xd_type xd;

   typedef double _y_type;
  _y_type y;

   typedef double _yd_type;
  _yd_type yd;

   typedef double _ex_type;
  _ex_type ex;

   typedef double _ey_type;
  _ey_type ey;

   typedef double _evx_type;
  _evx_type evx;

   typedef double _evy_type;
  _evy_type evy;

   typedef double _eT_type;
  _eT_type eT;





  typedef boost::shared_ptr< ::controller::DatosControl_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::controller::DatosControl_<ContainerAllocator> const> ConstPtr;

}; // struct DatosControl_

typedef ::controller::DatosControl_<std::allocator<void> > DatosControl;

typedef boost::shared_ptr< ::controller::DatosControl > DatosControlPtr;
typedef boost::shared_ptr< ::controller::DatosControl const> DatosControlConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::controller::DatosControl_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::controller::DatosControl_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::controller::DatosControl_<ContainerAllocator1> & lhs, const ::controller::DatosControl_<ContainerAllocator2> & rhs)
{
  return lhs.linearVel == rhs.linearVel &&
    lhs.angularVel == rhs.angularVel &&
    lhs.angle == rhs.angle &&
    lhs.x == rhs.x &&
    lhs.xd == rhs.xd &&
    lhs.y == rhs.y &&
    lhs.yd == rhs.yd &&
    lhs.ex == rhs.ex &&
    lhs.ey == rhs.ey &&
    lhs.evx == rhs.evx &&
    lhs.evy == rhs.evy &&
    lhs.eT == rhs.eT;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::controller::DatosControl_<ContainerAllocator1> & lhs, const ::controller::DatosControl_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace controller

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::controller::DatosControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::controller::DatosControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::DatosControl_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::controller::DatosControl_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::DatosControl_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::controller::DatosControl_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::controller::DatosControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "837132ccf45cf52b00c57285b91233c7";
  }

  static const char* value(const ::controller::DatosControl_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x837132ccf45cf52bULL;
  static const uint64_t static_value2 = 0x00c57285b91233c7ULL;
};

template<class ContainerAllocator>
struct DataType< ::controller::DatosControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "controller/DatosControl";
  }

  static const char* value(const ::controller::DatosControl_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::controller::DatosControl_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 linearVel\n"
"float64 angularVel\n"
"float64 angle\n"
"float64 x\n"
"float64 xd\n"
"float64 y\n"
"float64 yd\n"
"float64 ex\n"
"float64 ey\n"
"float64 evx\n"
"float64 evy\n"
"float64 eT\n"
"\n"
;
  }

  static const char* value(const ::controller::DatosControl_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::controller::DatosControl_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.linearVel);
      stream.next(m.angularVel);
      stream.next(m.angle);
      stream.next(m.x);
      stream.next(m.xd);
      stream.next(m.y);
      stream.next(m.yd);
      stream.next(m.ex);
      stream.next(m.ey);
      stream.next(m.evx);
      stream.next(m.evy);
      stream.next(m.eT);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct DatosControl_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::controller::DatosControl_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::controller::DatosControl_<ContainerAllocator>& v)
  {
    s << indent << "linearVel: ";
    Printer<double>::stream(s, indent + "  ", v.linearVel);
    s << indent << "angularVel: ";
    Printer<double>::stream(s, indent + "  ", v.angularVel);
    s << indent << "angle: ";
    Printer<double>::stream(s, indent + "  ", v.angle);
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "xd: ";
    Printer<double>::stream(s, indent + "  ", v.xd);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "yd: ";
    Printer<double>::stream(s, indent + "  ", v.yd);
    s << indent << "ex: ";
    Printer<double>::stream(s, indent + "  ", v.ex);
    s << indent << "ey: ";
    Printer<double>::stream(s, indent + "  ", v.ey);
    s << indent << "evx: ";
    Printer<double>::stream(s, indent + "  ", v.evx);
    s << indent << "evy: ";
    Printer<double>::stream(s, indent + "  ", v.evy);
    s << indent << "eT: ";
    Printer<double>::stream(s, indent + "  ", v.eT);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CONTROLLER_MESSAGE_DATOSCONTROL_H
