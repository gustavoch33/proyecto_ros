// Generated by gencpp from file robot_msgs/bateria.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_BATERIA_H
#define ROBOT_MSGS_MESSAGE_BATERIA_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct bateria_
{
  typedef bateria_<ContainerAllocator> Type;

  bateria_()
    : header()
    , voltage(0.0)
    , current(0.0)
    , status_of_charge(0.0)
    , temperature(0.0)
    , Ampere_per_hour(0.0)
    , is_charging(false)
    , load_status(false)  {
    }
  bateria_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , voltage(0.0)
    , current(0.0)
    , status_of_charge(0.0)
    , temperature(0.0)
    , Ampere_per_hour(0.0)
    , is_charging(false)
    , load_status(false)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef float _voltage_type;
  _voltage_type voltage;

   typedef float _current_type;
  _current_type current;

   typedef float _status_of_charge_type;
  _status_of_charge_type status_of_charge;

   typedef float _temperature_type;
  _temperature_type temperature;

   typedef float _Ampere_per_hour_type;
  _Ampere_per_hour_type Ampere_per_hour;

   typedef uint8_t _is_charging_type;
  _is_charging_type is_charging;

   typedef uint8_t _load_status_type;
  _load_status_type load_status;





  typedef boost::shared_ptr< ::robot_msgs::bateria_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::bateria_<ContainerAllocator> const> ConstPtr;

}; // struct bateria_

typedef ::robot_msgs::bateria_<std::allocator<void> > bateria;

typedef boost::shared_ptr< ::robot_msgs::bateria > bateriaPtr;
typedef boost::shared_ptr< ::robot_msgs::bateria const> bateriaConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::bateria_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::bateria_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::bateria_<ContainerAllocator1> & lhs, const ::robot_msgs::bateria_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.voltage == rhs.voltage &&
    lhs.current == rhs.current &&
    lhs.status_of_charge == rhs.status_of_charge &&
    lhs.temperature == rhs.temperature &&
    lhs.Ampere_per_hour == rhs.Ampere_per_hour &&
    lhs.is_charging == rhs.is_charging &&
    lhs.load_status == rhs.load_status;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::bateria_<ContainerAllocator1> & lhs, const ::robot_msgs::bateria_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::bateria_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::bateria_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::bateria_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::bateria_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::bateria_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::bateria_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::bateria_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67d61af42115ef4cc2745e3e4c9ffbb9";
  }

  static const char* value(const ::robot_msgs::bateria_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67d61af42115ef4cULL;
  static const uint64_t static_value2 = 0xc2745e3e4c9ffbb9ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::bateria_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/bateria";
  }

  static const char* value(const ::robot_msgs::bateria_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::bateria_<ContainerAllocator> >
{
  static const char* value()
  {
    return "Header header\n"
"float32 voltage\n"
"float32 current\n"
"float32 status_of_charge\n"
"float32 temperature\n"
"float32 Ampere_per_hour\n"
"bool is_charging\n"
"bool load_status\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robot_msgs::bateria_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::bateria_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.voltage);
      stream.next(m.current);
      stream.next(m.status_of_charge);
      stream.next(m.temperature);
      stream.next(m.Ampere_per_hour);
      stream.next(m.is_charging);
      stream.next(m.load_status);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct bateria_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::bateria_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::bateria_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
    s << indent << "current: ";
    Printer<float>::stream(s, indent + "  ", v.current);
    s << indent << "status_of_charge: ";
    Printer<float>::stream(s, indent + "  ", v.status_of_charge);
    s << indent << "temperature: ";
    Printer<float>::stream(s, indent + "  ", v.temperature);
    s << indent << "Ampere_per_hour: ";
    Printer<float>::stream(s, indent + "  ", v.Ampere_per_hour);
    s << indent << "is_charging: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.is_charging);
    s << indent << "load_status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.load_status);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_BATERIA_H
