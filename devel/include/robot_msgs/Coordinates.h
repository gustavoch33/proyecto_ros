// Generated by gencpp from file robot_msgs/Coordinates.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_COORDINATES_H
#define ROBOT_MSGS_MESSAGE_COORDINATES_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct Coordinates_
{
  typedef Coordinates_<ContainerAllocator> Type;

  Coordinates_()
    : latitude(0.0)
    , longitude(0.0)
    , status(false)
    , source()  {
    }
  Coordinates_(const ContainerAllocator& _alloc)
    : latitude(0.0)
    , longitude(0.0)
    , status(false)
    , source(_alloc)  {
  (void)_alloc;
    }



   typedef float _latitude_type;
  _latitude_type latitude;

   typedef float _longitude_type;
  _longitude_type longitude;

   typedef uint8_t _status_type;
  _status_type status;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _source_type;
  _source_type source;





  typedef boost::shared_ptr< ::robot_msgs::Coordinates_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::Coordinates_<ContainerAllocator> const> ConstPtr;

}; // struct Coordinates_

typedef ::robot_msgs::Coordinates_<std::allocator<void> > Coordinates;

typedef boost::shared_ptr< ::robot_msgs::Coordinates > CoordinatesPtr;
typedef boost::shared_ptr< ::robot_msgs::Coordinates const> CoordinatesConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::Coordinates_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::Coordinates_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::Coordinates_<ContainerAllocator1> & lhs, const ::robot_msgs::Coordinates_<ContainerAllocator2> & rhs)
{
  return lhs.latitude == rhs.latitude &&
    lhs.longitude == rhs.longitude &&
    lhs.status == rhs.status &&
    lhs.source == rhs.source;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::Coordinates_<ContainerAllocator1> & lhs, const ::robot_msgs::Coordinates_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Coordinates_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::Coordinates_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Coordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::Coordinates_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Coordinates_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::Coordinates_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "46d1ab400450b699b64a700e5bad67d2";
  }

  static const char* value(const ::robot_msgs::Coordinates_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x46d1ab400450b699ULL;
  static const uint64_t static_value2 = 0xb64a700e5bad67d2ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/Coordinates";
  }

  static const char* value(const ::robot_msgs::Coordinates_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::Coordinates_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 latitude\n"
"float32 longitude\n"
"bool status\n"
"string source\n"
;
  }

  static const char* value(const ::robot_msgs::Coordinates_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::Coordinates_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.latitude);
      stream.next(m.longitude);
      stream.next(m.status);
      stream.next(m.source);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Coordinates_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::Coordinates_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::Coordinates_<ContainerAllocator>& v)
  {
    s << indent << "latitude: ";
    Printer<float>::stream(s, indent + "  ", v.latitude);
    s << indent << "longitude: ";
    Printer<float>::stream(s, indent + "  ", v.longitude);
    s << indent << "status: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.status);
    s << indent << "source: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.source);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_COORDINATES_H
