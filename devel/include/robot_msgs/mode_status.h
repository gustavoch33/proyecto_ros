// Generated by gencpp from file robot_msgs/mode_status.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_MODE_STATUS_H
#define ROBOT_MSGS_MESSAGE_MODE_STATUS_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct mode_status_
{
  typedef mode_status_<ContainerAllocator> Type;

  mode_status_()
    : docking(false)
    , manual(false)
    , navigation(false)
    , mapping(false)
    , stand_by(false)  {
    }
  mode_status_(const ContainerAllocator& _alloc)
    : docking(false)
    , manual(false)
    , navigation(false)
    , mapping(false)
    , stand_by(false)  {
  (void)_alloc;
    }



   typedef uint8_t _docking_type;
  _docking_type docking;

   typedef uint8_t _manual_type;
  _manual_type manual;

   typedef uint8_t _navigation_type;
  _navigation_type navigation;

   typedef uint8_t _mapping_type;
  _mapping_type mapping;

   typedef uint8_t _stand_by_type;
  _stand_by_type stand_by;





  typedef boost::shared_ptr< ::robot_msgs::mode_status_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::mode_status_<ContainerAllocator> const> ConstPtr;

}; // struct mode_status_

typedef ::robot_msgs::mode_status_<std::allocator<void> > mode_status;

typedef boost::shared_ptr< ::robot_msgs::mode_status > mode_statusPtr;
typedef boost::shared_ptr< ::robot_msgs::mode_status const> mode_statusConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::mode_status_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::mode_status_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::mode_status_<ContainerAllocator1> & lhs, const ::robot_msgs::mode_status_<ContainerAllocator2> & rhs)
{
  return lhs.docking == rhs.docking &&
    lhs.manual == rhs.manual &&
    lhs.navigation == rhs.navigation &&
    lhs.mapping == rhs.mapping &&
    lhs.stand_by == rhs.stand_by;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::mode_status_<ContainerAllocator1> & lhs, const ::robot_msgs::mode_status_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::mode_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::mode_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::mode_status_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::mode_status_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::mode_status_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::mode_status_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::mode_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "401e19daf4dfa2be65d1fcd32ec6dd29";
  }

  static const char* value(const ::robot_msgs::mode_status_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x401e19daf4dfa2beULL;
  static const uint64_t static_value2 = 0x65d1fcd32ec6dd29ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::mode_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/mode_status";
  }

  static const char* value(const ::robot_msgs::mode_status_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::mode_status_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool docking\n"
"bool manual\n"
"bool navigation\n"
"bool mapping\n"
"bool stand_by\n"
;
  }

  static const char* value(const ::robot_msgs::mode_status_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::mode_status_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.docking);
      stream.next(m.manual);
      stream.next(m.navigation);
      stream.next(m.mapping);
      stream.next(m.stand_by);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct mode_status_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::mode_status_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::mode_status_<ContainerAllocator>& v)
  {
    s << indent << "docking: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.docking);
    s << indent << "manual: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.manual);
    s << indent << "navigation: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.navigation);
    s << indent << "mapping: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.mapping);
    s << indent << "stand_by: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.stand_by);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_MODE_STATUS_H
