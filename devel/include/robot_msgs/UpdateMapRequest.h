// Generated by gencpp from file robot_msgs/UpdateMapRequest.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_UPDATEMAPREQUEST_H
#define ROBOT_MSGS_MESSAGE_UPDATEMAPREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct UpdateMapRequest_
{
  typedef UpdateMapRequest_<ContainerAllocator> Type;

  UpdateMapRequest_()
    : id()
    , width(0)
    , height(0)
    , origin()
    , resolution(0.0)
    , map()  {
    }
  UpdateMapRequest_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , width(0)
    , height(0)
    , origin(_alloc)
    , resolution(0.0)
    , map(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef int32_t _width_type;
  _width_type width;

   typedef int32_t _height_type;
  _height_type height;

   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _origin_type;
  _origin_type origin;

   typedef float _resolution_type;
  _resolution_type resolution;

   typedef std::vector<int32_t, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<int32_t>> _map_type;
  _map_type map;





  typedef boost::shared_ptr< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> const> ConstPtr;

}; // struct UpdateMapRequest_

typedef ::robot_msgs::UpdateMapRequest_<std::allocator<void> > UpdateMapRequest;

typedef boost::shared_ptr< ::robot_msgs::UpdateMapRequest > UpdateMapRequestPtr;
typedef boost::shared_ptr< ::robot_msgs::UpdateMapRequest const> UpdateMapRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::UpdateMapRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::UpdateMapRequest_<ContainerAllocator1> & lhs, const ::robot_msgs::UpdateMapRequest_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.width == rhs.width &&
    lhs.height == rhs.height &&
    lhs.origin == rhs.origin &&
    lhs.resolution == rhs.resolution &&
    lhs.map == rhs.map;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::UpdateMapRequest_<ContainerAllocator1> & lhs, const ::robot_msgs::UpdateMapRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f88f541e5b683735b26f2dc4560a7f5f";
  }

  static const char* value(const ::robot_msgs::UpdateMapRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf88f541e5b683735ULL;
  static const uint64_t static_value2 = 0xb26f2dc4560a7f5fULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/UpdateMapRequest";
  }

  static const char* value(const ::robot_msgs::UpdateMapRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"int32 width\n"
"int32 height\n"
"float32[] origin\n"
"float32 resolution\n"
"int32[] map\n"
;
  }

  static const char* value(const ::robot_msgs::UpdateMapRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.width);
      stream.next(m.height);
      stream.next(m.origin);
      stream.next(m.resolution);
      stream.next(m.map);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct UpdateMapRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::UpdateMapRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::UpdateMapRequest_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "width: ";
    Printer<int32_t>::stream(s, indent + "  ", v.width);
    s << indent << "height: ";
    Printer<int32_t>::stream(s, indent + "  ", v.height);
    s << indent << "origin[]" << std::endl;
    for (size_t i = 0; i < v.origin.size(); ++i)
    {
      s << indent << "  origin[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.origin[i]);
    }
    s << indent << "resolution: ";
    Printer<float>::stream(s, indent + "  ", v.resolution);
    s << indent << "map[]" << std::endl;
    for (size_t i = 0; i < v.map.size(); ++i)
    {
      s << indent << "  map[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.map[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_UPDATEMAPREQUEST_H
