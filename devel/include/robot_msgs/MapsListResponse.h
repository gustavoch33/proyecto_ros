// Generated by gencpp from file robot_msgs/MapsListResponse.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_MAPSLISTRESPONSE_H
#define ROBOT_MSGS_MESSAGE_MAPSLISTRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <robot_msgs/map_size.h>

namespace robot_msgs
{
template <class ContainerAllocator>
struct MapsListResponse_
{
  typedef MapsListResponse_<ContainerAllocator> Type;

  MapsListResponse_()
    : maps()  {
    }
  MapsListResponse_(const ContainerAllocator& _alloc)
    : maps(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::robot_msgs::map_size_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::robot_msgs::map_size_<ContainerAllocator> >> _maps_type;
  _maps_type maps;





  typedef boost::shared_ptr< ::robot_msgs::MapsListResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::MapsListResponse_<ContainerAllocator> const> ConstPtr;

}; // struct MapsListResponse_

typedef ::robot_msgs::MapsListResponse_<std::allocator<void> > MapsListResponse;

typedef boost::shared_ptr< ::robot_msgs::MapsListResponse > MapsListResponsePtr;
typedef boost::shared_ptr< ::robot_msgs::MapsListResponse const> MapsListResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::MapsListResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::MapsListResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::MapsListResponse_<ContainerAllocator1> & lhs, const ::robot_msgs::MapsListResponse_<ContainerAllocator2> & rhs)
{
  return lhs.maps == rhs.maps;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::MapsListResponse_<ContainerAllocator1> & lhs, const ::robot_msgs::MapsListResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::MapsListResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::MapsListResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::MapsListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::MapsListResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::MapsListResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::MapsListResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::MapsListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "95634a3fee1a76a7a235711f38773ee4";
  }

  static const char* value(const ::robot_msgs::MapsListResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x95634a3fee1a76a7ULL;
  static const uint64_t static_value2 = 0xa235711f38773ee4ULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::MapsListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/MapsListResponse";
  }

  static const char* value(const ::robot_msgs::MapsListResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::MapsListResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/map_size[] maps\n"
"\n"
"================================================================================\n"
"MSG: robot_msgs/map_size\n"
"string id\n"
"int32 size\n"
;
  }

  static const char* value(const ::robot_msgs::MapsListResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::MapsListResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.maps);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct MapsListResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::MapsListResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::MapsListResponse_<ContainerAllocator>& v)
  {
    s << indent << "maps[]" << std::endl;
    for (size_t i = 0; i < v.maps.size(); ++i)
    {
      s << indent << "  maps[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::robot_msgs::map_size_<ContainerAllocator> >::stream(s, indent + "    ", v.maps[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_MAPSLISTRESPONSE_H
