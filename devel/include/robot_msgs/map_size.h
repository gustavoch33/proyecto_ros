// Generated by gencpp from file robot_msgs/map_size.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_MAP_SIZE_H
#define ROBOT_MSGS_MESSAGE_MAP_SIZE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct map_size_
{
  typedef map_size_<ContainerAllocator> Type;

  map_size_()
    : id()
    , size(0)  {
    }
  map_size_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , size(0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef int32_t _size_type;
  _size_type size;





  typedef boost::shared_ptr< ::robot_msgs::map_size_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::map_size_<ContainerAllocator> const> ConstPtr;

}; // struct map_size_

typedef ::robot_msgs::map_size_<std::allocator<void> > map_size;

typedef boost::shared_ptr< ::robot_msgs::map_size > map_sizePtr;
typedef boost::shared_ptr< ::robot_msgs::map_size const> map_sizeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::map_size_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::map_size_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::map_size_<ContainerAllocator1> & lhs, const ::robot_msgs::map_size_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.size == rhs.size;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::map_size_<ContainerAllocator1> & lhs, const ::robot_msgs::map_size_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::map_size_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::map_size_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::map_size_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::map_size_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::map_size_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::map_size_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::map_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ff688be933a0f08df7fa3860e57820bf";
  }

  static const char* value(const ::robot_msgs::map_size_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xff688be933a0f08dULL;
  static const uint64_t static_value2 = 0xf7fa3860e57820bfULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::map_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/map_size";
  }

  static const char* value(const ::robot_msgs::map_size_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::map_size_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string id\n"
"int32 size\n"
;
  }

  static const char* value(const ::robot_msgs::map_size_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::map_size_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.size);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct map_size_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::map_size_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::map_size_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "size: ";
    Printer<int32_t>::stream(s, indent + "  ", v.size);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_MAP_SIZE_H
