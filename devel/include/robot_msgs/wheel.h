// Generated by gencpp from file robot_msgs/wheel.msg
// DO NOT EDIT!


#ifndef ROBOT_MSGS_MESSAGE_WHEEL_H
#define ROBOT_MSGS_MESSAGE_WHEEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robot_msgs
{
template <class ContainerAllocator>
struct wheel_
{
  typedef wheel_<ContainerAllocator> Type;

  wheel_()
    : ticks(0)
    , speed(0)
    , status()
    , voltage(0.0)  {
    }
  wheel_(const ContainerAllocator& _alloc)
    : ticks(0)
    , speed(0)
    , status(_alloc)
    , voltage(0.0)  {
  (void)_alloc;
    }



   typedef int32_t _ticks_type;
  _ticks_type ticks;

   typedef int32_t _speed_type;
  _speed_type speed;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _status_type;
  _status_type status;

   typedef float _voltage_type;
  _voltage_type voltage;





  typedef boost::shared_ptr< ::robot_msgs::wheel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robot_msgs::wheel_<ContainerAllocator> const> ConstPtr;

}; // struct wheel_

typedef ::robot_msgs::wheel_<std::allocator<void> > wheel;

typedef boost::shared_ptr< ::robot_msgs::wheel > wheelPtr;
typedef boost::shared_ptr< ::robot_msgs::wheel const> wheelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robot_msgs::wheel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robot_msgs::wheel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robot_msgs::wheel_<ContainerAllocator1> & lhs, const ::robot_msgs::wheel_<ContainerAllocator2> & rhs)
{
  return lhs.ticks == rhs.ticks &&
    lhs.speed == rhs.speed &&
    lhs.status == rhs.status &&
    lhs.voltage == rhs.voltage;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robot_msgs::wheel_<ContainerAllocator1> & lhs, const ::robot_msgs::wheel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robot_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::wheel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robot_msgs::wheel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::wheel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robot_msgs::wheel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::wheel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robot_msgs::wheel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robot_msgs::wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f4cd7b31463f8774369e41de285741fe";
  }

  static const char* value(const ::robot_msgs::wheel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf4cd7b31463f8774ULL;
  static const uint64_t static_value2 = 0x369e41de285741feULL;
};

template<class ContainerAllocator>
struct DataType< ::robot_msgs::wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robot_msgs/wheel";
  }

  static const char* value(const ::robot_msgs::wheel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robot_msgs::wheel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 ticks\n"
"int32 speed\n"
"string status\n"
"float32 voltage\n"
;
  }

  static const char* value(const ::robot_msgs::wheel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robot_msgs::wheel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.ticks);
      stream.next(m.speed);
      stream.next(m.status);
      stream.next(m.voltage);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct wheel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robot_msgs::wheel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robot_msgs::wheel_<ContainerAllocator>& v)
  {
    s << indent << "ticks: ";
    Printer<int32_t>::stream(s, indent + "  ", v.ticks);
    s << indent << "speed: ";
    Printer<int32_t>::stream(s, indent + "  ", v.speed);
    s << indent << "status: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.status);
    s << indent << "voltage: ";
    Printer<float>::stream(s, indent + "  ", v.voltage);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOT_MSGS_MESSAGE_WHEEL_H
